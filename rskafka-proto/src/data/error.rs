use rskafka_wire_format::{error::ParseError, prelude::*};
use std::borrow::Cow;

#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
pub enum ErrorCode {
    UnknownServerError,
    None,
    OffsetOutOfRange,
    CorruptMessage,
    UnknownTopicOrPartition,
    InvalidFetchSize,
    LeaderNotAvailable,
    NotLeaderForPartition,
    RequestTimedOut,
    BrokerNotAvailable,
    ReplicaNotAvailable,
    MessageTooLarge,
    StaleControllerEpoch,
    OffsetMetadataTooLarge,
    NetworkException,
    CoordinatorLoadInProgress,
    CoordinatorNotAvailable,
    NotCoordinator,
    InvalidTopicException,
    RecordListTooLarge,
    NotEnoughReplicas,
    NotEnoughReplicasAfterAppend,
    InvalidRequiredAcks,
    IllegalGeneration,
    InconsistentGroupProtocol,
    InvalidGroupId,
    UnknownMemberId,
    InvalidSessionTimeout,
    RebalanceInProgress,
    InvalidCommitOffsetSize,
    TopicAuthorizationFailed,
    GroupAuthorizationFailed,
    ClusterAuthorizationFailed,
    InvalidTimestamp,
    UnsupportedSaslMechanism,
    IllegalSaslState,
    UnsupportedVersion,
    TopicAlreadyExists,
    InvalidPartitions,
    InvalidReplicationFactor,
    InvalidReplicaAssignment,
    InvalidConfig,
    NotController,
    InvalidRequest,
    UnsupportedForMessageFormat,
    PolicyViolation,
    OutOfOrderSequenceNumber,
    DuplicateSequenceNumber,
    InvalidProducerEpoch,
    InvalidTxnState,
    InvalidProducerIdMapping,
    InvalidTransactionTimeout,
    ConcurrentTransactions,
    TransactionCoordinatorFenced,
    TransactionalIdAuthorizationFailed,
    SecurityDisabled,
    OperationNotAttempted,
    KafkaStorageError,
    LogDirNotFound,
    SaslAuthenticationFailed,
    UnknownProducerId,
    ReassignmentInProgress,
    DelegationTokenAuthDisabled,
    DelegationTokenNotFound,
    DelegationTokenOwnerMismatch,
    DelegationTokenRequestNotAllowed,
    DelegationTokenAuthorizationFailed,
    DelegationTokenExpired,
    InvalidPrincipalType,
    NonEmptyGroup,
    GroupIdNotFound,
    FetchSessionIdNotFound,
    InvalidFetchSessionEpoch,
    ListenerNotFound,
    TopicDeletionDisabled,
    FencedLeaderEpoch,
    UnknownLeaderEpoch,
    UnsupportedCompressionType,
    StaleBrokerEpoch,
    OffsetNotAvailable,
    MemberIdRequired,
    PreferredLeaderNotAvailable,
    GroupMaxSizeReached,
    FencedInstanceId,
    EligibleLeadersNotAvailable,
    ElectionNotNeeded,
    NoReassignmentInProgress,
    GroupSubscribedToTopic,
    InvalidRecord,
    UnstableOffsetCommit,
    Unknown(i16),
}

impl ErrorCode {
    pub fn to_i16(&self) -> i16 {
        match self {
            ErrorCode::UnknownServerError => -1,
            ErrorCode::None => 0,
            ErrorCode::OffsetOutOfRange => 1,
            ErrorCode::CorruptMessage => 2,
            ErrorCode::UnknownTopicOrPartition => 3,
            ErrorCode::InvalidFetchSize => 4,
            ErrorCode::LeaderNotAvailable => 5,
            ErrorCode::NotLeaderForPartition => 6,
            ErrorCode::RequestTimedOut => 7,
            ErrorCode::BrokerNotAvailable => 8,
            ErrorCode::ReplicaNotAvailable => 9,
            ErrorCode::MessageTooLarge => 10,
            ErrorCode::StaleControllerEpoch => 11,
            ErrorCode::OffsetMetadataTooLarge => 12,
            ErrorCode::NetworkException => 13,
            ErrorCode::CoordinatorLoadInProgress => 14,
            ErrorCode::CoordinatorNotAvailable => 15,
            ErrorCode::NotCoordinator => 16,
            ErrorCode::InvalidTopicException => 17,
            ErrorCode::RecordListTooLarge => 18,
            ErrorCode::NotEnoughReplicas => 19,
            ErrorCode::NotEnoughReplicasAfterAppend => 20,
            ErrorCode::InvalidRequiredAcks => 21,
            ErrorCode::IllegalGeneration => 22,
            ErrorCode::InconsistentGroupProtocol => 23,
            ErrorCode::InvalidGroupId => 24,
            ErrorCode::UnknownMemberId => 25,
            ErrorCode::InvalidSessionTimeout => 26,
            ErrorCode::RebalanceInProgress => 27,
            ErrorCode::InvalidCommitOffsetSize => 28,
            ErrorCode::TopicAuthorizationFailed => 29,
            ErrorCode::GroupAuthorizationFailed => 30,
            ErrorCode::ClusterAuthorizationFailed => 31,
            ErrorCode::InvalidTimestamp => 32,
            ErrorCode::UnsupportedSaslMechanism => 33,
            ErrorCode::IllegalSaslState => 34,
            ErrorCode::UnsupportedVersion => 35,
            ErrorCode::TopicAlreadyExists => 36,
            ErrorCode::InvalidPartitions => 37,
            ErrorCode::InvalidReplicationFactor => 38,
            ErrorCode::InvalidReplicaAssignment => 39,
            ErrorCode::InvalidConfig => 40,
            ErrorCode::NotController => 41,
            ErrorCode::InvalidRequest => 42,
            ErrorCode::UnsupportedForMessageFormat => 43,
            ErrorCode::PolicyViolation => 44,
            ErrorCode::OutOfOrderSequenceNumber => 45,
            ErrorCode::DuplicateSequenceNumber => 46,
            ErrorCode::InvalidProducerEpoch => 47,
            ErrorCode::InvalidTxnState => 48,
            ErrorCode::InvalidProducerIdMapping => 49,
            ErrorCode::InvalidTransactionTimeout => 50,
            ErrorCode::ConcurrentTransactions => 51,
            ErrorCode::TransactionCoordinatorFenced => 52,
            ErrorCode::TransactionalIdAuthorizationFailed => 53,
            ErrorCode::SecurityDisabled => 54,
            ErrorCode::OperationNotAttempted => 55,
            ErrorCode::KafkaStorageError => 56,
            ErrorCode::LogDirNotFound => 57,
            ErrorCode::SaslAuthenticationFailed => 58,
            ErrorCode::UnknownProducerId => 59,
            ErrorCode::ReassignmentInProgress => 60,
            ErrorCode::DelegationTokenAuthDisabled => 61,
            ErrorCode::DelegationTokenNotFound => 62,
            ErrorCode::DelegationTokenOwnerMismatch => 63,
            ErrorCode::DelegationTokenRequestNotAllowed => 64,
            ErrorCode::DelegationTokenAuthorizationFailed => 65,
            ErrorCode::DelegationTokenExpired => 66,
            ErrorCode::InvalidPrincipalType => 67,
            ErrorCode::NonEmptyGroup => 68,
            ErrorCode::GroupIdNotFound => 69,
            ErrorCode::FetchSessionIdNotFound => 70,
            ErrorCode::InvalidFetchSessionEpoch => 71,
            ErrorCode::ListenerNotFound => 72,
            ErrorCode::TopicDeletionDisabled => 73,
            ErrorCode::FencedLeaderEpoch => 74,
            ErrorCode::UnknownLeaderEpoch => 75,
            ErrorCode::UnsupportedCompressionType => 76,
            ErrorCode::StaleBrokerEpoch => 77,
            ErrorCode::OffsetNotAvailable => 78,
            ErrorCode::MemberIdRequired => 79,
            ErrorCode::PreferredLeaderNotAvailable => 80,
            ErrorCode::GroupMaxSizeReached => 81,
            ErrorCode::FencedInstanceId => 82,
            ErrorCode::EligibleLeadersNotAvailable => 83,
            ErrorCode::ElectionNotNeeded => 84,
            ErrorCode::NoReassignmentInProgress => 85,
            ErrorCode::GroupSubscribedToTopic => 86,
            ErrorCode::InvalidRecord => 87,
            ErrorCode::UnstableOffsetCommit => 88,
            ErrorCode::Unknown(code) => *code,
        }
    }

    pub fn from_i16(v: i16) -> Self {
        match v {
            -1 => ErrorCode::UnknownServerError,
            0 => ErrorCode::None,
            1 => ErrorCode::OffsetOutOfRange,
            2 => ErrorCode::CorruptMessage,
            3 => ErrorCode::UnknownTopicOrPartition,
            4 => ErrorCode::InvalidFetchSize,
            5 => ErrorCode::LeaderNotAvailable,
            6 => ErrorCode::NotLeaderForPartition,
            7 => ErrorCode::RequestTimedOut,
            8 => ErrorCode::BrokerNotAvailable,
            9 => ErrorCode::ReplicaNotAvailable,
            10 => ErrorCode::MessageTooLarge,
            11 => ErrorCode::StaleControllerEpoch,
            12 => ErrorCode::OffsetMetadataTooLarge,
            13 => ErrorCode::NetworkException,
            14 => ErrorCode::CoordinatorLoadInProgress,
            15 => ErrorCode::CoordinatorNotAvailable,
            16 => ErrorCode::NotCoordinator,
            17 => ErrorCode::InvalidTopicException,
            18 => ErrorCode::RecordListTooLarge,
            19 => ErrorCode::NotEnoughReplicas,
            20 => ErrorCode::NotEnoughReplicasAfterAppend,
            21 => ErrorCode::InvalidRequiredAcks,
            22 => ErrorCode::IllegalGeneration,
            23 => ErrorCode::InconsistentGroupProtocol,
            24 => ErrorCode::InvalidGroupId,
            25 => ErrorCode::UnknownMemberId,
            26 => ErrorCode::InvalidSessionTimeout,
            27 => ErrorCode::RebalanceInProgress,
            28 => ErrorCode::InvalidCommitOffsetSize,
            29 => ErrorCode::TopicAuthorizationFailed,
            30 => ErrorCode::GroupAuthorizationFailed,
            31 => ErrorCode::ClusterAuthorizationFailed,
            32 => ErrorCode::InvalidTimestamp,
            33 => ErrorCode::UnsupportedSaslMechanism,
            34 => ErrorCode::IllegalSaslState,
            35 => ErrorCode::UnsupportedVersion,
            36 => ErrorCode::TopicAlreadyExists,
            37 => ErrorCode::InvalidPartitions,
            38 => ErrorCode::InvalidReplicationFactor,
            39 => ErrorCode::InvalidReplicaAssignment,
            40 => ErrorCode::InvalidConfig,
            41 => ErrorCode::NotController,
            42 => ErrorCode::InvalidRequest,
            43 => ErrorCode::UnsupportedForMessageFormat,
            44 => ErrorCode::PolicyViolation,
            45 => ErrorCode::OutOfOrderSequenceNumber,
            46 => ErrorCode::DuplicateSequenceNumber,
            47 => ErrorCode::InvalidProducerEpoch,
            48 => ErrorCode::InvalidTxnState,
            49 => ErrorCode::InvalidProducerIdMapping,
            50 => ErrorCode::InvalidTransactionTimeout,
            51 => ErrorCode::ConcurrentTransactions,
            52 => ErrorCode::TransactionCoordinatorFenced,
            53 => ErrorCode::TransactionalIdAuthorizationFailed,
            54 => ErrorCode::SecurityDisabled,
            55 => ErrorCode::OperationNotAttempted,
            56 => ErrorCode::KafkaStorageError,
            57 => ErrorCode::LogDirNotFound,
            58 => ErrorCode::SaslAuthenticationFailed,
            59 => ErrorCode::UnknownProducerId,
            60 => ErrorCode::ReassignmentInProgress,
            61 => ErrorCode::DelegationTokenAuthDisabled,
            62 => ErrorCode::DelegationTokenNotFound,
            63 => ErrorCode::DelegationTokenOwnerMismatch,
            64 => ErrorCode::DelegationTokenRequestNotAllowed,
            65 => ErrorCode::DelegationTokenAuthorizationFailed,
            66 => ErrorCode::DelegationTokenExpired,
            67 => ErrorCode::InvalidPrincipalType,
            68 => ErrorCode::NonEmptyGroup,
            69 => ErrorCode::GroupIdNotFound,
            70 => ErrorCode::FetchSessionIdNotFound,
            71 => ErrorCode::InvalidFetchSessionEpoch,
            72 => ErrorCode::ListenerNotFound,
            73 => ErrorCode::TopicDeletionDisabled,
            74 => ErrorCode::FencedLeaderEpoch,
            75 => ErrorCode::UnknownLeaderEpoch,
            76 => ErrorCode::UnsupportedCompressionType,
            77 => ErrorCode::StaleBrokerEpoch,
            78 => ErrorCode::OffsetNotAvailable,
            79 => ErrorCode::MemberIdRequired,
            80 => ErrorCode::PreferredLeaderNotAvailable,
            81 => ErrorCode::GroupMaxSizeReached,
            82 => ErrorCode::FencedInstanceId,
            83 => ErrorCode::EligibleLeadersNotAvailable,
            84 => ErrorCode::ElectionNotNeeded,
            85 => ErrorCode::NoReassignmentInProgress,
            86 => ErrorCode::GroupSubscribedToTopic,
            87 => ErrorCode::InvalidRecord,
            88 => ErrorCode::UnstableOffsetCommit,
            other => ErrorCode::Unknown(other),
        }
    }
}

impl std::fmt::Display for ErrorCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let text = match self {
            ErrorCode::UnknownServerError => Cow::Borrowed("UNKNOWN_SERVER_ERROR"),
            ErrorCode::None => Cow::Borrowed("NONE"),
            ErrorCode::OffsetOutOfRange => Cow::Borrowed("OFFSET_OUT_OF_RANGE"),
            ErrorCode::CorruptMessage => Cow::Borrowed("CORRUPT_MESSAGE"),
            ErrorCode::UnknownTopicOrPartition => Cow::Borrowed("UNKNOWN_TOPIC_OR_PARTITION"),
            ErrorCode::InvalidFetchSize => Cow::Borrowed("INVALID_FETCH_SIZE"),
            ErrorCode::LeaderNotAvailable => Cow::Borrowed("LEADER_NOT_AVAILABLE"),
            ErrorCode::NotLeaderForPartition => Cow::Borrowed("NOT_LEADER_FOR_PARTITION"),
            ErrorCode::RequestTimedOut => Cow::Borrowed("REQUEST_TIMED_OUT"),
            ErrorCode::BrokerNotAvailable => Cow::Borrowed("BROKER_NOT_AVAILABLE"),
            ErrorCode::ReplicaNotAvailable => Cow::Borrowed("REPLICA_NOT_AVAILABLE"),
            ErrorCode::MessageTooLarge => Cow::Borrowed("MESSAGE_TOO_LARGE"),
            ErrorCode::StaleControllerEpoch => Cow::Borrowed("STALE_CONTROLLER_EPOCH"),
            ErrorCode::OffsetMetadataTooLarge => Cow::Borrowed("OFFSET_METADATA_TOO_LARGE"),
            ErrorCode::NetworkException => Cow::Borrowed("NETWORK_EXCEPTION"),
            ErrorCode::CoordinatorLoadInProgress => Cow::Borrowed("COORDINATOR_LOAD_IN_PROGRESS"),
            ErrorCode::CoordinatorNotAvailable => Cow::Borrowed("COORDINATOR_NOT_AVAILABLE"),
            ErrorCode::NotCoordinator => Cow::Borrowed("NOT_COORDINATOR"),
            ErrorCode::InvalidTopicException => Cow::Borrowed("INVALID_TOPIC_EXCEPTION"),
            ErrorCode::RecordListTooLarge => Cow::Borrowed("RECORD_LIST_TOO_LARGE"),
            ErrorCode::NotEnoughReplicas => Cow::Borrowed("NOT_ENOUGH_REPLICAS"),
            ErrorCode::NotEnoughReplicasAfterAppend => {
                Cow::Borrowed("NOT_ENOUGH_REPLICAS_AFTER_APPEND")
            }
            ErrorCode::InvalidRequiredAcks => Cow::Borrowed("INVALID_REQUIRED_ACKS"),
            ErrorCode::IllegalGeneration => Cow::Borrowed("ILLEGAL_GENERATION"),
            ErrorCode::InconsistentGroupProtocol => Cow::Borrowed("INCONSISTENT_GROUP_PROTOCOL"),
            ErrorCode::InvalidGroupId => Cow::Borrowed("INVALID_GROUP_ID"),
            ErrorCode::UnknownMemberId => Cow::Borrowed("UNKNOWN_MEMBER_ID"),
            ErrorCode::InvalidSessionTimeout => Cow::Borrowed("INVALID_SESSION_TIMEOUT"),
            ErrorCode::RebalanceInProgress => Cow::Borrowed("REBALANCE_IN_PROGRESS"),
            ErrorCode::InvalidCommitOffsetSize => Cow::Borrowed("INVALID_COMMIT_OFFSET_SIZE"),
            ErrorCode::TopicAuthorizationFailed => Cow::Borrowed("TOPIC_AUTHORIZATION_FAILED"),
            ErrorCode::GroupAuthorizationFailed => Cow::Borrowed("GROUP_AUTHORIZATION_FAILED"),
            ErrorCode::ClusterAuthorizationFailed => Cow::Borrowed("CLUSTER_AUTHORIZATION_FAILED"),
            ErrorCode::InvalidTimestamp => Cow::Borrowed("INVALID_TIMESTAMP"),
            ErrorCode::UnsupportedSaslMechanism => Cow::Borrowed("UNSUPPORTED_SASL_MECHANISM"),
            ErrorCode::IllegalSaslState => Cow::Borrowed("ILLEGAL_SASL_STATE"),
            ErrorCode::UnsupportedVersion => Cow::Borrowed("UNSUPPORTED_VERSION"),
            ErrorCode::TopicAlreadyExists => Cow::Borrowed("TOPIC_ALREADY_EXISTS"),
            ErrorCode::InvalidPartitions => Cow::Borrowed("INVALID_PARTITIONS"),
            ErrorCode::InvalidReplicationFactor => Cow::Borrowed("INVALID_REPLICATION_FACTOR"),
            ErrorCode::InvalidReplicaAssignment => Cow::Borrowed("INVALID_REPLICA_ASSIGNMENT"),
            ErrorCode::InvalidConfig => Cow::Borrowed("INVALID_CONFIG"),
            ErrorCode::NotController => Cow::Borrowed("NOT_CONTROLLER"),
            ErrorCode::InvalidRequest => Cow::Borrowed("INVALID_REQUEST"),
            ErrorCode::UnsupportedForMessageFormat => {
                Cow::Borrowed("UNSUPPORTED_FOR_MESSAGE_FORMAT")
            }
            ErrorCode::PolicyViolation => Cow::Borrowed("POLICY_VIOLATION"),
            ErrorCode::OutOfOrderSequenceNumber => Cow::Borrowed("OUT_OF_ORDER_SEQUENCE_NUMBER"),
            ErrorCode::DuplicateSequenceNumber => Cow::Borrowed("DUPLICATE_SEQUENCE_NUMBER"),
            ErrorCode::InvalidProducerEpoch => Cow::Borrowed("INVALID_PRODUCER_EPOCH"),
            ErrorCode::InvalidTxnState => Cow::Borrowed("INVALID_TXN_STATE"),
            ErrorCode::InvalidProducerIdMapping => Cow::Borrowed("INVALID_PRODUCER_ID_MAPPING"),
            ErrorCode::InvalidTransactionTimeout => Cow::Borrowed("INVALID_TRANSACTION_TIMEOUT"),
            ErrorCode::ConcurrentTransactions => Cow::Borrowed("CONCURRENT_TRANSACTIONS"),
            ErrorCode::TransactionCoordinatorFenced => {
                Cow::Borrowed("TRANSACTION_COORDINATOR_FENCED")
            }
            ErrorCode::TransactionalIdAuthorizationFailed => {
                Cow::Borrowed("TRANSACTIONAL_ID_AUTHORIZATION_FAILED")
            }
            ErrorCode::SecurityDisabled => Cow::Borrowed("SECURITY_DISABLED"),
            ErrorCode::OperationNotAttempted => Cow::Borrowed("OPERATION_NOT_ATTEMPTED"),
            ErrorCode::KafkaStorageError => Cow::Borrowed("KAFKA_STORAGE_ERROR"),
            ErrorCode::LogDirNotFound => Cow::Borrowed("LOG_DIR_NOT_FOUND"),
            ErrorCode::SaslAuthenticationFailed => Cow::Borrowed("SASL_AUTHENTICATION_FAILED"),
            ErrorCode::UnknownProducerId => Cow::Borrowed("UNKNOWN_PRODUCER_ID"),
            ErrorCode::ReassignmentInProgress => Cow::Borrowed("REASSIGNMENT_IN_PROGRESS"),
            ErrorCode::DelegationTokenAuthDisabled => {
                Cow::Borrowed("DELEGATION_TOKEN_AUTH_DISABLED")
            }
            ErrorCode::DelegationTokenNotFound => Cow::Borrowed("DELEGATION_TOKEN_NOT_FOUND"),
            ErrorCode::DelegationTokenOwnerMismatch => {
                Cow::Borrowed("DELEGATION_TOKEN_OWNER_MISMATCH")
            }
            ErrorCode::DelegationTokenRequestNotAllowed => {
                Cow::Borrowed("DELEGATION_TOKEN_REQUEST_NOT_ALLOWED")
            }
            ErrorCode::DelegationTokenAuthorizationFailed => {
                Cow::Borrowed("DELEGATION_TOKEN_AUTHORIZATION_FAILED")
            }
            ErrorCode::DelegationTokenExpired => Cow::Borrowed("DELEGATION_TOKEN_EXPIRED"),
            ErrorCode::InvalidPrincipalType => Cow::Borrowed("INVALID_PRINCIPAL_TYPE"),
            ErrorCode::NonEmptyGroup => Cow::Borrowed("NON_EMPTY_GROUP"),
            ErrorCode::GroupIdNotFound => Cow::Borrowed("GROUP_ID_NOT_FOUND"),
            ErrorCode::FetchSessionIdNotFound => Cow::Borrowed("FETCH_SESSION_ID_NOT_FOUND"),
            ErrorCode::InvalidFetchSessionEpoch => Cow::Borrowed("INVALID_FETCH_SESSION_EPOCH"),
            ErrorCode::ListenerNotFound => Cow::Borrowed("LISTENER_NOT_FOUND"),
            ErrorCode::TopicDeletionDisabled => Cow::Borrowed("TOPIC_DELETION_DISABLED"),
            ErrorCode::FencedLeaderEpoch => Cow::Borrowed("FENCED_LEADER_EPOCH"),
            ErrorCode::UnknownLeaderEpoch => Cow::Borrowed("UNKNOWN_LEADER_EPOCH"),
            ErrorCode::UnsupportedCompressionType => Cow::Borrowed("UNSUPPORTED_COMPRESSION_TYPE"),
            ErrorCode::StaleBrokerEpoch => Cow::Borrowed("STALE_BROKER_EPOCH"),
            ErrorCode::OffsetNotAvailable => Cow::Borrowed("OFFSET_NOT_AVAILABLE"),
            ErrorCode::MemberIdRequired => Cow::Borrowed("MEMBER_ID_REQUIRED"),
            ErrorCode::PreferredLeaderNotAvailable => {
                Cow::Borrowed("PREFERRED_LEADER_NOT_AVAILABLE")
            }
            ErrorCode::GroupMaxSizeReached => Cow::Borrowed("GROUP_MAX_SIZE_REACHED"),
            ErrorCode::FencedInstanceId => Cow::Borrowed("FENCED_INSTANCE_ID"),
            ErrorCode::EligibleLeadersNotAvailable => {
                Cow::Borrowed("ELIGIBLE_LEADERS_NOT_AVAILABLE")
            }
            ErrorCode::ElectionNotNeeded => Cow::Borrowed("ELECTION_NOT_NEEDED"),
            ErrorCode::NoReassignmentInProgress => Cow::Borrowed("NO_REASSIGNMENT_IN_PROGRESS"),
            ErrorCode::GroupSubscribedToTopic => Cow::Borrowed("GROUP_SUBSCRIBED_TO_TOPIC"),
            ErrorCode::InvalidRecord => Cow::Borrowed("INVALID_RECORD"),
            ErrorCode::UnstableOffsetCommit => Cow::Borrowed("UNSTABLE_OFFSET_COMMIT"),
            ErrorCode::Unknown(code) => Cow::Owned(format!("{}", code)),
        };

        f.write_str(text.as_ref())
    }
}

impl<'a> WireFormatParse for ErrorCode {
    fn parse_bytes(input: &[u8]) -> IResult<&[u8], Self, ParseError> {
        let (input, v) = i16::parse_bytes(input)?;
        Ok((input, ErrorCode::from_i16(v)))
    }
}
